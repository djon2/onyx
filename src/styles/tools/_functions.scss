/**
 * Returns the transition properties in the correct format
 * This function is used by @mixin transition($transitions...)
 */
@function get-transition-properties($transition) {
  $property: all;
  $duration: $transition-duration;
  $easing: $transition-timing;
  $delay: null;

  $defaultProperties: (
    $property,
    $duration,
    $easing,
    $delay
  );

  $properties: ();

  @for $i from 1 through length($defaultProperties) {
    $p: null;

    @if $i <= length($transition) {
      $p: nth($transition, $i);
    } @else {
      $p: nth($defaultProperties, $i);
    }

    $properties: append($properties, $p);
  }

  @return $properties;
}

@function get-global-spacing($size, $viewport-size: 'md') {
  @if map-has-key($universal-spacing, $size) {
      $spacing: map-get($universal-spacing, $size);

      @if map-has-key($spacing, $viewport-size) {
          @return map-get($spacing, $viewport-size);
      } @else {
          @error 'Invalid viewport size "#{$viewport-size}" for spacing size "#{$size}"';
      }
  } @else {
      @error 'Invalid spacing size "#{$size}"';
  }
}

@function z-index($key) {
  @return map-get($z-index, $key);
}
